{"version":3,"file":"static/js/353.3171df6a.chunk.js","mappings":"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","sources":["components/Cast/Cast.jsx","components/Reviews/Reviews.jsx","components/SingleMovie/SingleMovie.jsx","pages/SingleMoviePage/SingleMoviePage.jsx","shared/services/movies.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieCast } from '../../shared/services/movies';\n\nconst Cast = () => {\n  const [state, setState] = useState({\n    actor: [],\n    loading: false,\n    error: null,\n  });\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchMoviesCast = async () => {\n      console.log('fetchMoviesCast');\n      try {\n        setState(prevState => ({\n          ...prevState,\n          loading: true,\n        }));\n        const { cast } = await getMovieCast(id);\n        setState({\n          actor: [...cast],\n          loading: false,\n          error: null,\n        });\n      } catch (err) {\n        setState({\n          actor: [],\n          loading: false,\n          error: err,\n        });\n      }\n    };\n    fetchMoviesCast();\n  }, [id]);\n\n  const { actor, loading, error } = state;\n\n  const items = actor.map(item => (\n    <li key={item.id}>\n      <img\n        src={\n          item.profile_path\n            ? `https://image.tmdb.org/t/p/w500${item.profile_path}`\n            : 'https://i.pinimg.com/564x/fc/3e/10/fc3e10132be5819982df46baa80224a8.jpg'\n        }\n        alt=\"\"\n      />\n      <p>{item.name}</p>\n      <p>{item.character}</p>\n    </li>\n  ));\n\n  const listActor = actor.length > 0 && !loading && !error;\n\n  return (\n    <>\n      {loading && <p>Search actors</p>}\n      {error && !loading && <p>No actors</p>}\n      {listActor ? <ul>{items}</ul> : <p>No famous actors</p>}\n    </>\n  );\n};\n\nexport default Cast;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieReviews } from '../../shared/services/movies';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState({\n    review: [],\n    loading: false,\n    error: null,\n  });\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchMoviesReviews = async () => {\n      try {\n        setReviews(prevState => ({\n          ...prevState,\n          loading: true,\n        }));\n        const { results } = await getMovieReviews(id);\n        setReviews({\n          review: [...results],\n          loading: false,\n          error: null,\n        });\n      } catch (err) {\n        setReviews({\n          review: [],\n          loading: false,\n          error: err,\n        });\n      }\n    };\n    fetchMoviesReviews();\n  }, [id]);\n\n  const { review, loading, error } = reviews;\n\n  const items = review.map(item => (\n    <li key={review.id}>\n      <p>\n        <span>Author: </span>\n        {item.author}\n      </p>\n      <p>\n        <span>Comment: </span>\n        {item.content}\n      </p>\n    </li>\n  ));\n\n  const listReviews = reviews.length > 0 && !loading && !error;\n\n  return (\n    <>\n      {loading && <p>Search reviews</p>}\n      {error && !loading && <p>No reviews</p>}\n      {!listReviews ? <ul>{items}</ul> : <p>No reviews</p>}\n    </>\n  );\n};\n\nexport default Reviews;\n","import { useEffect, useState } from 'react';\nimport {\n  Route,\n  Routes,\n  useParams,\n  useNavigate,\n  NavLink,\n  useLocation,\n} from 'react-router-dom';\n\nimport { getMovieById } from '../../shared/services/movies';\nimport Cast from '../Cast';\nimport Reviews from '../Reviews';\n\nconst SingleMovie = () => {\n  const [state, setState] = useState({\n    infoMovie: null,\n    loading: false,\n    error: null,\n  });\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchInfo = async () => {\n      try {\n        setState(prevData => ({\n          ...prevData,\n          loading: true,\n        }));\n        const data = await getMovieById(id);\n        setState({\n          infoMovie: { ...data },\n          loading: false,\n          error: null,\n        });\n      } catch (err) {\n        setState({\n          infoMovie: null,\n          loading: false,\n          error: err,\n        });\n      }\n    };\n\n    fetchInfo();\n  }, [id]);\n\n  const navigate = useNavigate();\n  const location = useLocation();\n  console.log(location);\n  const from = location.state?.from || '/';\n  const goBack = () => navigate(from);\n\n  const { loading, error, infoMovie } = state;\n  const infoMovieSearch = infoMovie && !loading && !error;\n\n  return (\n    <div>\n      {loading && <p>Making a list...</p>}\n      {error && !loading && <p>Everyone only watches Stranger Things.</p>}\n      {infoMovieSearch && (\n        <>\n          <img\n            src={\n              infoMovie.poster_path\n                ? `https://image.tmdb.org/t/p/w500${infoMovie.poster_path}`\n                : 'http://hypeava.ru/uploads/posts/2020-02/1580997108_3.jpg'\n            }\n            alt=\"\"\n          />\n          <h2>{infoMovie.title}</h2>\n          <p>Vote: {infoMovie.vote_average}</p>\n          <p>Popularity: {infoMovie.popularity}</p>\n          <h2>Overview</h2>\n          <p>{infoMovie.overview}</p>\n        </>\n      )}\n\n      <NavLink to=\"cast\" state={{ from: from }}>\n        Cast\n      </NavLink>\n      <NavLink to=\"reviews\" state={{ from: from }}>\n        Reviews\n      </NavLink>\n\n      <div>\n        <Routes>\n          <Route path=\"cast\" element={<Cast />} />\n          <Route path=\"reviews\" element={<Reviews />} />\n        </Routes>\n      </div>\n\n      <button type=\"button\" onClick={goBack}>\n        Back\n      </button>\n    </div>\n  );\n};\n\nexport default SingleMovie;\n","import SingleMovie from './../../components/SingleMovie';\n\nconst SingleMoviePage = () => {\n  return (\n    <main>\n      <SingleMovie />\n    </main>\n  );\n};\n\nexport default SingleMoviePage;\n","import axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n    params: {\n        api_key: 'ac60926f151e6a5963568dadf02e1e9a',\n    }\n})\n\nexport async function getTrending () {\n    const {data} = await instance.get('/trending/all/day')\n    return data;\n}\n\nexport async function getMovieById (id) {\n    const {data} = await instance.get(`/movie/${id}`)\n    return data;\n}\n\nexport async function getMoviesBySearch (query) {\n    const {data} = await instance.get(`/search/movie`, {\n        params: {\n            query,\n            page: 1,\n        }\n    })\n    return data;\n}\n\nexport async function getMovieCast (id) {\n    const {data} = await instance.get(`/movie/${id}/credits`)\n    return data;\n}\n\nexport async function getMovieReviews (id) {\n    const {data} = await instance.get(`/movie/${id}/reviews`)\n    return data;\n}"],"names":["useState","actor","loading","error","state","setState","id","useParams","useEffect","fetchMoviesCast","console","log","prevState","getMovieCast","cast","items","map","item","src","profile_path","alt","name","character","listActor","length","review","reviews","setReviews","fetchMoviesReviews","getMovieReviews","results","author","content","listReviews","infoMovie","fetchInfo","prevData","getMovieById","data","navigate","useNavigate","location","useLocation","from","infoMovieSearch","poster_path","title","vote_average","popularity","overview","to","path","element","type","onClick","instance","axios","baseURL","params","api_key","getTrending","get","getMoviesBySearch","query","page"],"sourceRoot":""}